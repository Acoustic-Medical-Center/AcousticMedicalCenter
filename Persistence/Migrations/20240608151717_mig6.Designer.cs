// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240608151717_mig6")]
    partial class mig6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(2085),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(2093),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(1988)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(1820),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 205, 98, 218, 9, 36, 81, 26, 61, 35, 213, 83, 250, 155, 142, 109, 27, 140, 220, 86, 83, 141, 240, 102, 40, 154, 128, 78, 226, 214, 241, 129, 108, 241, 70, 202, 204, 254, 102, 184, 44, 180, 229, 28, 136, 1, 230, 93, 235, 170, 128, 61, 187, 6, 171, 100, 251, 219, 19, 131, 86, 237, 44, 247, 219 },
                            PasswordSalt = new byte[] { 144, 223, 213, 59, 202, 103, 114, 41, 10, 236, 249, 72, 225, 14, 154, 75, 12, 16, 220, 33, 197, 87, 84, 85, 54, 166, 28, 0, 41, 144, 155, 58, 76, 137, 128, 86, 197, 247, 42, 165, 52, 61, 140, 137, 102, 66, 33, 32, 11, 20, 191, 34, 22, 155, 219, 195, 197, 197, 74, 130, 179, 237, 131, 219, 218, 0, 188, 145, 181, 60, 160, 173, 46, 1, 76, 109, 226, 66, 178, 34, 117, 17, 239, 245, 197, 176, 201, 13, 155, 60, 194, 172, 148, 12, 254, 50, 239, 9, 59, 242, 12, 102, 15, 38, 245, 24, 44, 221, 108, 171, 195, 159, 176, 229, 130, 74, 8, 86, 128, 174, 142, 210, 152, 239, 60, 112, 237, 192 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(1838),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 205, 98, 218, 9, 36, 81, 26, 61, 35, 213, 83, 250, 155, 142, 109, 27, 140, 220, 86, 83, 141, 240, 102, 40, 154, 128, 78, 226, 214, 241, 129, 108, 241, 70, 202, 204, 254, 102, 184, 44, 180, 229, 28, 136, 1, 230, 93, 235, 170, 128, 61, 187, 6, 171, 100, 251, 219, 19, 131, 86, 237, 44, 247, 219 },
                            PasswordSalt = new byte[] { 144, 223, 213, 59, 202, 103, 114, 41, 10, 236, 249, 72, 225, 14, 154, 75, 12, 16, 220, 33, 197, 87, 84, 85, 54, 166, 28, 0, 41, 144, 155, 58, 76, 137, 128, 86, 197, 247, 42, 165, 52, 61, 140, 137, 102, 66, 33, 32, 11, 20, 191, 34, 22, 155, 219, 195, 197, 197, 74, 130, 179, 237, 131, 219, 218, 0, 188, 145, 181, 60, 160, 173, 46, 1, 76, 109, 226, 66, 178, 34, 117, 17, 239, 245, 197, 176, 201, 13, 155, 60, 194, 172, 148, 12, 254, 50, 239, 9, 59, 242, 12, 102, 15, 38, 245, 24, 44, 221, 108, 171, 195, 159, 176, 229, 130, 74, 8, 86, 128, 174, 142, 210, 152, 239, 60, 112, 237, 192 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(1842),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 205, 98, 218, 9, 36, 81, 26, 61, 35, 213, 83, 250, 155, 142, 109, 27, 140, 220, 86, 83, 141, 240, 102, 40, 154, 128, 78, 226, 214, 241, 129, 108, 241, 70, 202, 204, 254, 102, 184, 44, 180, 229, 28, 136, 1, 230, 93, 235, 170, 128, 61, 187, 6, 171, 100, 251, 219, 19, 131, 86, 237, 44, 247, 219 },
                            PasswordSalt = new byte[] { 144, 223, 213, 59, 202, 103, 114, 41, 10, 236, 249, 72, 225, 14, 154, 75, 12, 16, 220, 33, 197, 87, 84, 85, 54, 166, 28, 0, 41, 144, 155, 58, 76, 137, 128, 86, 197, 247, 42, 165, 52, 61, 140, 137, 102, 66, 33, 32, 11, 20, 191, 34, 22, 155, 219, 195, 197, 197, 74, 130, 179, 237, 131, 219, 218, 0, 188, 145, 181, 60, 160, 173, 46, 1, 76, 109, 226, 66, 178, 34, 117, 17, 239, 245, 197, 176, 201, 13, 155, 60, 194, 172, 148, 12, 254, 50, 239, 9, 59, 242, 12, 102, 15, 38, 245, 24, 44, 221, 108, 171, 195, 159, 176, 229, 130, 74, 8, 86, 128, 174, 142, 210, 152, 239, 60, 112, 237, 192 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 17, 17, 523, DateTimeKind.Utc).AddTicks(1846),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 205, 98, 218, 9, 36, 81, 26, 61, 35, 213, 83, 250, 155, 142, 109, 27, 140, 220, 86, 83, 141, 240, 102, 40, 154, 128, 78, 226, 214, 241, 129, 108, 241, 70, 202, 204, 254, 102, 184, 44, 180, 229, 28, 136, 1, 230, 93, 235, 170, 128, 61, 187, 6, 171, 100, 251, 219, 19, 131, 86, 237, 44, 247, 219 },
                            PasswordSalt = new byte[] { 144, 223, 213, 59, 202, 103, 114, 41, 10, 236, 249, 72, 225, 14, 154, 75, 12, 16, 220, 33, 197, 87, 84, 85, 54, 166, 28, 0, 41, 144, 155, 58, 76, 137, 128, 86, 197, 247, 42, 165, 52, 61, 140, 137, 102, 66, 33, 32, 11, 20, 191, 34, 22, 155, 219, 195, 197, 197, 74, 130, 179, 237, 131, 219, 218, 0, 188, 145, 181, 60, 160, 173, 46, 1, 76, 109, 226, 66, 178, 34, 117, 17, 239, 245, 197, 176, 201, 13, 155, 60, 194, 172, 148, 12, 254, 50, 239, 9, 59, 242, 12, 102, 15, 38, 245, 24, 44, 221, 108, 171, 195, 159, 176, 229, 130, 74, 8, 86, 128, 174, 142, 210, 152, 239, 60, 112, 237, 192 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
