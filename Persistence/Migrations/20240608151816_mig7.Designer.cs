// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240608151816_mig7")]
    partial class mig7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(6076),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(6082),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(5981)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(5991)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(5850),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 107, 71, 223, 185, 129, 101, 121, 208, 146, 58, 21, 146, 19, 147, 181, 137, 102, 204, 132, 14, 74, 180, 4, 253, 160, 247, 200, 38, 11, 157, 240, 49, 142, 107, 63, 71, 170, 134, 229, 254, 90, 51, 175, 166, 58, 200, 242, 244, 59, 77, 37, 143, 27, 33, 66, 45, 14, 228, 86, 224, 169, 87, 214, 192 },
                            PasswordSalt = new byte[] { 74, 167, 247, 128, 39, 129, 9, 104, 176, 172, 210, 25, 37, 245, 236, 245, 131, 182, 243, 36, 177, 186, 214, 74, 16, 255, 83, 82, 225, 108, 182, 125, 15, 231, 65, 71, 19, 222, 254, 156, 253, 123, 186, 117, 119, 105, 216, 209, 141, 120, 52, 240, 197, 121, 95, 206, 209, 83, 238, 168, 60, 55, 195, 119, 254, 172, 110, 37, 131, 253, 104, 187, 178, 97, 116, 184, 74, 26, 93, 248, 73, 228, 230, 120, 67, 218, 5, 162, 137, 144, 81, 116, 16, 242, 200, 112, 171, 121, 145, 254, 188, 100, 75, 113, 115, 221, 107, 231, 246, 123, 69, 236, 12, 25, 80, 125, 191, 112, 37, 127, 149, 240, 214, 88, 21, 20, 58, 67 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(5866),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 107, 71, 223, 185, 129, 101, 121, 208, 146, 58, 21, 146, 19, 147, 181, 137, 102, 204, 132, 14, 74, 180, 4, 253, 160, 247, 200, 38, 11, 157, 240, 49, 142, 107, 63, 71, 170, 134, 229, 254, 90, 51, 175, 166, 58, 200, 242, 244, 59, 77, 37, 143, 27, 33, 66, 45, 14, 228, 86, 224, 169, 87, 214, 192 },
                            PasswordSalt = new byte[] { 74, 167, 247, 128, 39, 129, 9, 104, 176, 172, 210, 25, 37, 245, 236, 245, 131, 182, 243, 36, 177, 186, 214, 74, 16, 255, 83, 82, 225, 108, 182, 125, 15, 231, 65, 71, 19, 222, 254, 156, 253, 123, 186, 117, 119, 105, 216, 209, 141, 120, 52, 240, 197, 121, 95, 206, 209, 83, 238, 168, 60, 55, 195, 119, 254, 172, 110, 37, 131, 253, 104, 187, 178, 97, 116, 184, 74, 26, 93, 248, 73, 228, 230, 120, 67, 218, 5, 162, 137, 144, 81, 116, 16, 242, 200, 112, 171, 121, 145, 254, 188, 100, 75, 113, 115, 221, 107, 231, 246, 123, 69, 236, 12, 25, 80, 125, 191, 112, 37, 127, 149, 240, 214, 88, 21, 20, 58, 67 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(5871),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 107, 71, 223, 185, 129, 101, 121, 208, 146, 58, 21, 146, 19, 147, 181, 137, 102, 204, 132, 14, 74, 180, 4, 253, 160, 247, 200, 38, 11, 157, 240, 49, 142, 107, 63, 71, 170, 134, 229, 254, 90, 51, 175, 166, 58, 200, 242, 244, 59, 77, 37, 143, 27, 33, 66, 45, 14, 228, 86, 224, 169, 87, 214, 192 },
                            PasswordSalt = new byte[] { 74, 167, 247, 128, 39, 129, 9, 104, 176, 172, 210, 25, 37, 245, 236, 245, 131, 182, 243, 36, 177, 186, 214, 74, 16, 255, 83, 82, 225, 108, 182, 125, 15, 231, 65, 71, 19, 222, 254, 156, 253, 123, 186, 117, 119, 105, 216, 209, 141, 120, 52, 240, 197, 121, 95, 206, 209, 83, 238, 168, 60, 55, 195, 119, 254, 172, 110, 37, 131, 253, 104, 187, 178, 97, 116, 184, 74, 26, 93, 248, 73, 228, 230, 120, 67, 218, 5, 162, 137, 144, 81, 116, 16, 242, 200, 112, 171, 121, 145, 254, 188, 100, 75, 113, 115, 221, 107, 231, 246, 123, 69, 236, 12, 25, 80, 125, 191, 112, 37, 127, 149, 240, 214, 88, 21, 20, 58, 67 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 18, 16, 381, DateTimeKind.Utc).AddTicks(5874),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 107, 71, 223, 185, 129, 101, 121, 208, 146, 58, 21, 146, 19, 147, 181, 137, 102, 204, 132, 14, 74, 180, 4, 253, 160, 247, 200, 38, 11, 157, 240, 49, 142, 107, 63, 71, 170, 134, 229, 254, 90, 51, 175, 166, 58, 200, 242, 244, 59, 77, 37, 143, 27, 33, 66, 45, 14, 228, 86, 224, 169, 87, 214, 192 },
                            PasswordSalt = new byte[] { 74, 167, 247, 128, 39, 129, 9, 104, 176, 172, 210, 25, 37, 245, 236, 245, 131, 182, 243, 36, 177, 186, 214, 74, 16, 255, 83, 82, 225, 108, 182, 125, 15, 231, 65, 71, 19, 222, 254, 156, 253, 123, 186, 117, 119, 105, 216, 209, 141, 120, 52, 240, 197, 121, 95, 206, 209, 83, 238, 168, 60, 55, 195, 119, 254, 172, 110, 37, 131, 253, 104, 187, 178, 97, 116, 184, 74, 26, 93, 248, 73, 228, 230, 120, 67, 218, 5, 162, 137, 144, 81, 116, 16, 242, 200, 112, 171, 121, 145, 254, 188, 100, 75, 113, 115, 221, 107, 231, 246, 123, 69, 236, 12, 25, 80, 125, 191, 112, 37, 127, 149, 240, 214, 88, 21, 20, 58, 67 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
