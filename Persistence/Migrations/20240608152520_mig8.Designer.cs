// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240608152520_mig8")]
    partial class mig8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(3029),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(3036),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 25, 20, 186, DateTimeKind.Local).AddTicks(2247),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 25, 20, 186, DateTimeKind.Local).AddTicks(2281),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2935)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2943)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2799),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 240, 228, 203, 30, 229, 185, 173, 129, 124, 105, 159, 195, 29, 111, 226, 66, 162, 83, 72, 244, 193, 189, 255, 211, 57, 129, 213, 6, 201, 175, 199, 232, 198, 195, 198, 32, 10, 81, 209, 255, 229, 77, 95, 148, 96, 0, 38, 151, 146, 208, 141, 243, 187, 25, 139, 99, 199, 75, 76, 82, 175, 212, 52, 39 },
                            PasswordSalt = new byte[] { 206, 112, 99, 80, 140, 182, 98, 200, 241, 193, 168, 158, 189, 84, 198, 225, 116, 117, 210, 199, 59, 210, 0, 251, 145, 236, 239, 249, 163, 30, 95, 188, 246, 240, 17, 250, 251, 4, 99, 210, 187, 169, 232, 171, 127, 81, 26, 45, 137, 75, 215, 240, 148, 100, 196, 244, 116, 94, 180, 194, 100, 170, 69, 219, 135, 92, 168, 80, 174, 169, 138, 59, 17, 208, 197, 213, 153, 171, 191, 162, 231, 215, 177, 233, 70, 64, 117, 175, 13, 120, 36, 18, 105, 241, 12, 14, 72, 79, 150, 108, 178, 55, 210, 172, 141, 119, 60, 46, 98, 134, 140, 217, 7, 241, 149, 225, 9, 236, 176, 241, 90, 113, 39, 35, 203, 69, 103, 0 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2811),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 240, 228, 203, 30, 229, 185, 173, 129, 124, 105, 159, 195, 29, 111, 226, 66, 162, 83, 72, 244, 193, 189, 255, 211, 57, 129, 213, 6, 201, 175, 199, 232, 198, 195, 198, 32, 10, 81, 209, 255, 229, 77, 95, 148, 96, 0, 38, 151, 146, 208, 141, 243, 187, 25, 139, 99, 199, 75, 76, 82, 175, 212, 52, 39 },
                            PasswordSalt = new byte[] { 206, 112, 99, 80, 140, 182, 98, 200, 241, 193, 168, 158, 189, 84, 198, 225, 116, 117, 210, 199, 59, 210, 0, 251, 145, 236, 239, 249, 163, 30, 95, 188, 246, 240, 17, 250, 251, 4, 99, 210, 187, 169, 232, 171, 127, 81, 26, 45, 137, 75, 215, 240, 148, 100, 196, 244, 116, 94, 180, 194, 100, 170, 69, 219, 135, 92, 168, 80, 174, 169, 138, 59, 17, 208, 197, 213, 153, 171, 191, 162, 231, 215, 177, 233, 70, 64, 117, 175, 13, 120, 36, 18, 105, 241, 12, 14, 72, 79, 150, 108, 178, 55, 210, 172, 141, 119, 60, 46, 98, 134, 140, 217, 7, 241, 149, 225, 9, 236, 176, 241, 90, 113, 39, 35, 203, 69, 103, 0 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2816),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 240, 228, 203, 30, 229, 185, 173, 129, 124, 105, 159, 195, 29, 111, 226, 66, 162, 83, 72, 244, 193, 189, 255, 211, 57, 129, 213, 6, 201, 175, 199, 232, 198, 195, 198, 32, 10, 81, 209, 255, 229, 77, 95, 148, 96, 0, 38, 151, 146, 208, 141, 243, 187, 25, 139, 99, 199, 75, 76, 82, 175, 212, 52, 39 },
                            PasswordSalt = new byte[] { 206, 112, 99, 80, 140, 182, 98, 200, 241, 193, 168, 158, 189, 84, 198, 225, 116, 117, 210, 199, 59, 210, 0, 251, 145, 236, 239, 249, 163, 30, 95, 188, 246, 240, 17, 250, 251, 4, 99, 210, 187, 169, 232, 171, 127, 81, 26, 45, 137, 75, 215, 240, 148, 100, 196, 244, 116, 94, 180, 194, 100, 170, 69, 219, 135, 92, 168, 80, 174, 169, 138, 59, 17, 208, 197, 213, 153, 171, 191, 162, 231, 215, 177, 233, 70, 64, 117, 175, 13, 120, 36, 18, 105, 241, 12, 14, 72, 79, 150, 108, 178, 55, 210, 172, 141, 119, 60, 46, 98, 134, 140, 217, 7, 241, 149, 225, 9, 236, 176, 241, 90, 113, 39, 35, 203, 69, 103, 0 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2820),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 240, 228, 203, 30, 229, 185, 173, 129, 124, 105, 159, 195, 29, 111, 226, 66, 162, 83, 72, 244, 193, 189, 255, 211, 57, 129, 213, 6, 201, 175, 199, 232, 198, 195, 198, 32, 10, 81, 209, 255, 229, 77, 95, 148, 96, 0, 38, 151, 146, 208, 141, 243, 187, 25, 139, 99, 199, 75, 76, 82, 175, 212, 52, 39 },
                            PasswordSalt = new byte[] { 206, 112, 99, 80, 140, 182, 98, 200, 241, 193, 168, 158, 189, 84, 198, 225, 116, 117, 210, 199, 59, 210, 0, 251, 145, 236, 239, 249, 163, 30, 95, 188, 246, 240, 17, 250, 251, 4, 99, 210, 187, 169, 232, 171, 127, 81, 26, 45, 137, 75, 215, 240, 148, 100, 196, 244, 116, 94, 180, 194, 100, 170, 69, 219, 135, 92, 168, 80, 174, 169, 138, 59, 17, 208, 197, 213, 153, 171, 191, 162, 231, 215, 177, 233, 70, 64, 117, 175, 13, 120, 36, 18, 105, 241, 12, 14, 72, 79, 150, 108, 178, 55, 210, 172, 141, 119, 60, 46, 98, 134, 140, 217, 7, 241, 149, 225, 9, 236, 176, 241, 90, 113, 39, 35, 203, 69, 103, 0 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 25, 20, 186, DateTimeKind.Utc).AddTicks(2823),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 240, 228, 203, 30, 229, 185, 173, 129, 124, 105, 159, 195, 29, 111, 226, 66, 162, 83, 72, 244, 193, 189, 255, 211, 57, 129, 213, 6, 201, 175, 199, 232, 198, 195, 198, 32, 10, 81, 209, 255, 229, 77, 95, 148, 96, 0, 38, 151, 146, 208, 141, 243, 187, 25, 139, 99, 199, 75, 76, 82, 175, 212, 52, 39 },
                            PasswordSalt = new byte[] { 206, 112, 99, 80, 140, 182, 98, 200, 241, 193, 168, 158, 189, 84, 198, 225, 116, 117, 210, 199, 59, 210, 0, 251, 145, 236, 239, 249, 163, 30, 95, 188, 246, 240, 17, 250, 251, 4, 99, 210, 187, 169, 232, 171, 127, 81, 26, 45, 137, 75, 215, 240, 148, 100, 196, 244, 116, 94, 180, 194, 100, 170, 69, 219, 135, 92, 168, 80, 174, 169, 138, 59, 17, 208, 197, 213, 153, 171, 191, 162, 231, 215, 177, 233, 70, 64, 117, 175, 13, 120, 36, 18, 105, 241, 12, 14, 72, 79, 150, 108, 178, 55, 210, 172, 141, 119, 60, 46, 98, 134, 140, 217, 7, 241, 149, 225, 9, 236, 176, 241, 90, 113, 39, 35, 203, 69, 103, 0 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
