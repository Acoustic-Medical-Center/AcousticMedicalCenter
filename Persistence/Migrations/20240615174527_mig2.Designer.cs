// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240615174527_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTime = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4448),
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4453),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTime = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4461),
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4461),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTime = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4466),
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4466),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTime = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4470),
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4471),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Biography = "Id 3 olan Doktor Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(4277),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(4291),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("DoctorInterests");

                    b.HasData(
                        new
                        {
                            DoctorId = 3,
                            InterestId = 1
                        },
                        new
                        {
                            DoctorId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 7
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(1912),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(1998),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4606),
                            Name = "Kardiyoloji Araştırmaları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4622),
                            Name = "Çocuk Sağlığı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4626),
                            Name = "Onkoloji Tedavi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4629),
                            Name = "Nöroloji ve Beyin Cerrahisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4633),
                            Name = "Endokrinoloji ve Metabolizma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4637),
                            Name = "Gastroenteroloji ve Sindirim Sistemi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4640),
                            Name = "Psikiyatri ve Mental Sağlık"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4723),
                            Name = "Aile Hekimliği ve Birinci Basamak Sağlık Hizmetleri"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4727),
                            Name = "Parkinson Hastalığı"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(4732),
                            Name = "Bunama"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(2352),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(2365),
                            Name = "Appointment.Delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(4110)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(4128)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationFindings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(5036),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(5063),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(5067),
                            Diagnosis = "Diabetes Mellitus",
                            ExaminationFindings = "Fasting blood sugar level of 140 mg/dL"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(5070),
                            Diagnosis = "Chronic Obstructive Pulmonary Disease (COPD)",
                            ExaminationFindings = "Reduced lung function on spirometry"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(3807),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 8, 98, 168, 233, 114, 94, 114, 135, 56, 247, 193, 31, 110, 161, 41, 65, 175, 25, 59, 202, 116, 167, 171, 84, 83, 34, 111, 74, 8, 108, 155, 33, 60, 202, 54, 23, 129, 32, 160, 191, 143, 124, 109, 6, 191, 11, 151, 184, 133, 7, 7, 207, 17, 68, 191, 160, 0, 230, 128, 242, 60, 95, 226, 172 },
                            PasswordSalt = new byte[] { 208, 63, 45, 16, 117, 214, 241, 53, 46, 9, 194, 87, 29, 57, 80, 172, 127, 54, 179, 180, 213, 149, 231, 52, 128, 64, 209, 80, 35, 57, 202, 205, 228, 235, 13, 222, 71, 184, 31, 201, 194, 100, 29, 219, 102, 81, 243, 117, 67, 58, 222, 221, 149, 243, 71, 6, 42, 132, 119, 246, 50, 140, 129, 4, 62, 219, 130, 18, 135, 199, 50, 9, 41, 118, 212, 59, 148, 116, 142, 142, 230, 211, 123, 13, 100, 187, 78, 5, 32, 179, 57, 243, 122, 101, 4, 14, 211, 47, 188, 94, 156, 223, 21, 33, 138, 60, 117, 151, 250, 33, 243, 92, 241, 137, 212, 173, 38, 76, 190, 8, 85, 84, 164, 37, 97, 100, 119, 149 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(3824),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 8, 98, 168, 233, 114, 94, 114, 135, 56, 247, 193, 31, 110, 161, 41, 65, 175, 25, 59, 202, 116, 167, 171, 84, 83, 34, 111, 74, 8, 108, 155, 33, 60, 202, 54, 23, 129, 32, 160, 191, 143, 124, 109, 6, 191, 11, 151, 184, 133, 7, 7, 207, 17, 68, 191, 160, 0, 230, 128, 242, 60, 95, 226, 172 },
                            PasswordSalt = new byte[] { 208, 63, 45, 16, 117, 214, 241, 53, 46, 9, 194, 87, 29, 57, 80, 172, 127, 54, 179, 180, 213, 149, 231, 52, 128, 64, 209, 80, 35, 57, 202, 205, 228, 235, 13, 222, 71, 184, 31, 201, 194, 100, 29, 219, 102, 81, 243, 117, 67, 58, 222, 221, 149, 243, 71, 6, 42, 132, 119, 246, 50, 140, 129, 4, 62, 219, 130, 18, 135, 199, 50, 9, 41, 118, 212, 59, 148, 116, 142, 142, 230, 211, 123, 13, 100, 187, 78, 5, 32, 179, 57, 243, 122, 101, 4, 14, 211, 47, 188, 94, 156, 223, 21, 33, 138, 60, 117, 151, 250, 33, 243, 92, 241, 137, 212, 173, 38, 76, 190, 8, 85, 84, 164, 37, 97, 100, 119, 149 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(3829),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 8, 98, 168, 233, 114, 94, 114, 135, 56, 247, 193, 31, 110, 161, 41, 65, 175, 25, 59, 202, 116, 167, 171, 84, 83, 34, 111, 74, 8, 108, 155, 33, 60, 202, 54, 23, 129, 32, 160, 191, 143, 124, 109, 6, 191, 11, 151, 184, 133, 7, 7, 207, 17, 68, 191, 160, 0, 230, 128, 242, 60, 95, 226, 172 },
                            PasswordSalt = new byte[] { 208, 63, 45, 16, 117, 214, 241, 53, 46, 9, 194, 87, 29, 57, 80, 172, 127, 54, 179, 180, 213, 149, 231, 52, 128, 64, 209, 80, 35, 57, 202, 205, 228, 235, 13, 222, 71, 184, 31, 201, 194, 100, 29, 219, 102, 81, 243, 117, 67, 58, 222, 221, 149, 243, 71, 6, 42, 132, 119, 246, 50, 140, 129, 4, 62, 219, 130, 18, 135, 199, 50, 9, 41, 118, 212, 59, 148, 116, 142, 142, 230, 211, 123, 13, 100, 187, 78, 5, 32, 179, 57, 243, 122, 101, 4, 14, 211, 47, 188, 94, 156, 223, 21, 33, 138, 60, 117, 151, 250, 33, 243, 92, 241, 137, 212, 173, 38, 76, 190, 8, 85, 84, 164, 37, 97, 100, 119, 149 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(3836),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 8, 98, 168, 233, 114, 94, 114, 135, 56, 247, 193, 31, 110, 161, 41, 65, 175, 25, 59, 202, 116, 167, 171, 84, 83, 34, 111, 74, 8, 108, 155, 33, 60, 202, 54, 23, 129, 32, 160, 191, 143, 124, 109, 6, 191, 11, 151, 184, 133, 7, 7, 207, 17, 68, 191, 160, 0, 230, 128, 242, 60, 95, 226, 172 },
                            PasswordSalt = new byte[] { 208, 63, 45, 16, 117, 214, 241, 53, 46, 9, 194, 87, 29, 57, 80, 172, 127, 54, 179, 180, 213, 149, 231, 52, 128, 64, 209, 80, 35, 57, 202, 205, 228, 235, 13, 222, 71, 184, 31, 201, 194, 100, 29, 219, 102, 81, 243, 117, 67, 58, 222, 221, 149, 243, 71, 6, 42, 132, 119, 246, 50, 140, 129, 4, 62, 219, 130, 18, 135, 199, 50, 9, 41, 118, 212, 59, 148, 116, 142, 142, 230, 211, 123, 13, 100, 187, 78, 5, 32, 179, 57, 243, 122, 101, 4, 14, 211, 47, 188, 94, 156, 223, 21, 33, 138, 60, 117, 151, 250, 33, 243, 92, 241, 137, 212, 173, 38, 76, 190, 8, 85, 84, 164, 37, 97, 100, 119, 149 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 15, 17, 45, 26, 914, DateTimeKind.Utc).AddTicks(3840),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 8, 98, 168, 233, 114, 94, 114, 135, 56, 247, 193, 31, 110, 161, 41, 65, 175, 25, 59, 202, 116, 167, 171, 84, 83, 34, 111, 74, 8, 108, 155, 33, 60, 202, 54, 23, 129, 32, 160, 191, 143, 124, 109, 6, 191, 11, 151, 184, 133, 7, 7, 207, 17, 68, 191, 160, 0, 230, 128, 242, 60, 95, 226, 172 },
                            PasswordSalt = new byte[] { 208, 63, 45, 16, 117, 214, 241, 53, 46, 9, 194, 87, 29, 57, 80, 172, 127, 54, 179, 180, 213, 149, 231, 52, 128, 64, 209, 80, 35, 57, 202, 205, 228, 235, 13, 222, 71, 184, 31, 201, 194, 100, 29, 219, 102, 81, 243, 117, 67, 58, 222, 221, 149, 243, 71, 6, 42, 132, 119, 246, 50, 140, 129, 4, 62, 219, 130, 18, 135, 199, 50, 9, 41, 118, 212, 59, 148, 116, 142, 142, 230, 211, 123, 13, 100, 187, 78, 5, 32, 179, 57, 243, 122, 101, 4, 14, 211, 47, 188, 94, 156, 223, 21, 33, 138, 60, 117, 151, 250, 33, 243, 92, 241, 137, 212, 173, 38, 76, 190, 8, 85, 84, 164, 37, 97, 100, 119, 149 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(2723),
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 15, 20, 45, 26, 914, DateTimeKind.Local).AddTicks(2740),
                            OperationClaimId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorInterest")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Interest", "Interest")
                        .WithMany("DoctorInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("Domain.Entities.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("DoctorInterest");
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Navigation("DoctorInterests");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
