// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240618134409_mig3")]
    partial class mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTime = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6487),
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6489),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTime = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6497),
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6498),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTime = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6502),
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6503),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTime = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6508),
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6509),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Biography = "Id 3 olan Doktor Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6355),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6364),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("DoctorInterests");

                    b.HasData(
                        new
                        {
                            DoctorId = 3,
                            InterestId = 1
                        },
                        new
                        {
                            DoctorId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 7
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5006),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5046),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6637),
                            Name = "Kardiyoloji Araştırmaları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6649),
                            Name = "Çocuk Sağlığı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6654),
                            Name = "Onkoloji Tedavi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6658),
                            Name = "Nöroloji ve Beyin Cerrahisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6662),
                            Name = "Endokrinoloji ve Metabolizma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6667),
                            Name = "Gastroenteroloji ve Sindirim Sistemi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6671),
                            Name = "Psikiyatri ve Mental Sağlık"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6744),
                            Name = "Aile Hekimliği ve Birinci Basamak Sağlık Hizmetleri"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6750),
                            Name = "Parkinson Hastalığı"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(6756),
                            Name = "Bunama"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5171),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5224),
                            Name = "Appointment.Delete"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5229),
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6202)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6215)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationFindings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(7102),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(7113),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(7117),
                            Diagnosis = "Diabetes Mellitus",
                            ExaminationFindings = "Fasting blood sugar level of 140 mg/dL"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(7121),
                            Diagnosis = "Chronic Obstructive Pulmonary Disease (COPD)",
                            ExaminationFindings = "Reduced lung function on spirometry"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6008),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 168, 242, 121, 130, 51, 108, 14, 70, 74, 240, 60, 154, 10, 240, 188, 159, 151, 242, 66, 101, 236, 128, 115, 125, 84, 215, 238, 5, 111, 199, 226, 241, 209, 215, 248, 168, 5, 49, 156, 239, 243, 162, 80, 174, 90, 10, 188, 63, 147, 177, 122, 244, 251, 48, 121, 53, 145, 200, 141, 46, 67, 137, 90, 86 },
                            PasswordSalt = new byte[] { 219, 243, 72, 62, 146, 57, 58, 61, 193, 65, 254, 50, 137, 141, 229, 58, 75, 226, 220, 200, 39, 118, 11, 156, 200, 249, 51, 187, 75, 161, 126, 124, 202, 166, 53, 123, 114, 145, 253, 166, 34, 156, 71, 42, 10, 153, 174, 7, 60, 136, 30, 39, 228, 238, 253, 226, 202, 4, 251, 63, 239, 152, 141, 161, 19, 255, 233, 145, 249, 224, 13, 43, 26, 95, 229, 108, 168, 30, 47, 154, 87, 190, 60, 159, 22, 42, 196, 65, 216, 124, 220, 174, 144, 14, 109, 85, 207, 149, 94, 112, 128, 226, 108, 166, 236, 56, 26, 202, 153, 66, 67, 250, 103, 47, 109, 22, 20, 33, 63, 241, 87, 167, 247, 79, 37, 156, 185, 93 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6026),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 168, 242, 121, 130, 51, 108, 14, 70, 74, 240, 60, 154, 10, 240, 188, 159, 151, 242, 66, 101, 236, 128, 115, 125, 84, 215, 238, 5, 111, 199, 226, 241, 209, 215, 248, 168, 5, 49, 156, 239, 243, 162, 80, 174, 90, 10, 188, 63, 147, 177, 122, 244, 251, 48, 121, 53, 145, 200, 141, 46, 67, 137, 90, 86 },
                            PasswordSalt = new byte[] { 219, 243, 72, 62, 146, 57, 58, 61, 193, 65, 254, 50, 137, 141, 229, 58, 75, 226, 220, 200, 39, 118, 11, 156, 200, 249, 51, 187, 75, 161, 126, 124, 202, 166, 53, 123, 114, 145, 253, 166, 34, 156, 71, 42, 10, 153, 174, 7, 60, 136, 30, 39, 228, 238, 253, 226, 202, 4, 251, 63, 239, 152, 141, 161, 19, 255, 233, 145, 249, 224, 13, 43, 26, 95, 229, 108, 168, 30, 47, 154, 87, 190, 60, 159, 22, 42, 196, 65, 216, 124, 220, 174, 144, 14, 109, 85, 207, 149, 94, 112, 128, 226, 108, 166, 236, 56, 26, 202, 153, 66, 67, 250, 103, 47, 109, 22, 20, 33, 63, 241, 87, 167, 247, 79, 37, 156, 185, 93 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6031),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 168, 242, 121, 130, 51, 108, 14, 70, 74, 240, 60, 154, 10, 240, 188, 159, 151, 242, 66, 101, 236, 128, 115, 125, 84, 215, 238, 5, 111, 199, 226, 241, 209, 215, 248, 168, 5, 49, 156, 239, 243, 162, 80, 174, 90, 10, 188, 63, 147, 177, 122, 244, 251, 48, 121, 53, 145, 200, 141, 46, 67, 137, 90, 86 },
                            PasswordSalt = new byte[] { 219, 243, 72, 62, 146, 57, 58, 61, 193, 65, 254, 50, 137, 141, 229, 58, 75, 226, 220, 200, 39, 118, 11, 156, 200, 249, 51, 187, 75, 161, 126, 124, 202, 166, 53, 123, 114, 145, 253, 166, 34, 156, 71, 42, 10, 153, 174, 7, 60, 136, 30, 39, 228, 238, 253, 226, 202, 4, 251, 63, 239, 152, 141, 161, 19, 255, 233, 145, 249, 224, 13, 43, 26, 95, 229, 108, 168, 30, 47, 154, 87, 190, 60, 159, 22, 42, 196, 65, 216, 124, 220, 174, 144, 14, 109, 85, 207, 149, 94, 112, 128, 226, 108, 166, 236, 56, 26, 202, 153, 66, 67, 250, 103, 47, 109, 22, 20, 33, 63, 241, 87, 167, 247, 79, 37, 156, 185, 93 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6036),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 168, 242, 121, 130, 51, 108, 14, 70, 74, 240, 60, 154, 10, 240, 188, 159, 151, 242, 66, 101, 236, 128, 115, 125, 84, 215, 238, 5, 111, 199, 226, 241, 209, 215, 248, 168, 5, 49, 156, 239, 243, 162, 80, 174, 90, 10, 188, 63, 147, 177, 122, 244, 251, 48, 121, 53, 145, 200, 141, 46, 67, 137, 90, 86 },
                            PasswordSalt = new byte[] { 219, 243, 72, 62, 146, 57, 58, 61, 193, 65, 254, 50, 137, 141, 229, 58, 75, 226, 220, 200, 39, 118, 11, 156, 200, 249, 51, 187, 75, 161, 126, 124, 202, 166, 53, 123, 114, 145, 253, 166, 34, 156, 71, 42, 10, 153, 174, 7, 60, 136, 30, 39, 228, 238, 253, 226, 202, 4, 251, 63, 239, 152, 141, 161, 19, 255, 233, 145, 249, 224, 13, 43, 26, 95, 229, 108, 168, 30, 47, 154, 87, 190, 60, 159, 22, 42, 196, 65, 216, 124, 220, 174, 144, 14, 109, 85, 207, 149, 94, 112, 128, 226, 108, 166, 236, 56, 26, 202, 153, 66, 67, 250, 103, 47, 109, 22, 20, 33, 63, 241, 87, 167, 247, 79, 37, 156, 185, 93 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 18, 13, 44, 8, 993, DateTimeKind.Utc).AddTicks(6040),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 168, 242, 121, 130, 51, 108, 14, 70, 74, 240, 60, 154, 10, 240, 188, 159, 151, 242, 66, 101, 236, 128, 115, 125, 84, 215, 238, 5, 111, 199, 226, 241, 209, 215, 248, 168, 5, 49, 156, 239, 243, 162, 80, 174, 90, 10, 188, 63, 147, 177, 122, 244, 251, 48, 121, 53, 145, 200, 141, 46, 67, 137, 90, 86 },
                            PasswordSalt = new byte[] { 219, 243, 72, 62, 146, 57, 58, 61, 193, 65, 254, 50, 137, 141, 229, 58, 75, 226, 220, 200, 39, 118, 11, 156, 200, 249, 51, 187, 75, 161, 126, 124, 202, 166, 53, 123, 114, 145, 253, 166, 34, 156, 71, 42, 10, 153, 174, 7, 60, 136, 30, 39, 228, 238, 253, 226, 202, 4, 251, 63, 239, 152, 141, 161, 19, 255, 233, 145, 249, 224, 13, 43, 26, 95, 229, 108, 168, 30, 47, 154, 87, 190, 60, 159, 22, 42, 196, 65, 216, 124, 220, 174, 144, 14, 109, 85, 207, 149, 94, 112, 128, 226, 108, 166, 236, 56, 26, 202, 153, 66, 67, 250, 103, 47, 109, 22, 20, 33, 63, 241, 87, 167, 247, 79, 37, 156, 185, 93 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5464),
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5475),
                            OperationClaimId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5479),
                            OperationClaimId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 18, 16, 44, 8, 993, DateTimeKind.Local).AddTicks(5485),
                            OperationClaimId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorInterest")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Interest", "Interest")
                        .WithMany("DoctorInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("Domain.Entities.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("DoctorInterest");
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Navigation("DoctorInterests");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
