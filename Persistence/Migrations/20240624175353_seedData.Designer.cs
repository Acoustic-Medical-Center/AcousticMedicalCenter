// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240624175353_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTime = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3705),
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3707),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTime = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3715),
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3716),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTime = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3721),
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3721),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTime = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3725),
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3726),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Biography = "Id 3 olan Doktor Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3599),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3606),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("DoctorInterests");

                    b.HasData(
                        new
                        {
                            DoctorId = 3,
                            InterestId = 1
                        },
                        new
                        {
                            DoctorId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 7
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2594),
                            NameEN = "Neurosurgery",
                            NameTR = "Beyin ve Sinir Cerrahisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2606),
                            NameEN = "Dermatology",
                            NameTR = "Dermatoloji"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2607),
                            NameEN = "General Surgery",
                            NameTR = "Genel Cerrahi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2608),
                            NameEN = "Ophthalmology",
                            NameTR = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2609),
                            NameEN = "Internal Medicine",
                            NameTR = "İç Hastalıkları"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2611),
                            NameEN = "Obstetrics and Gynecology",
                            NameTR = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2612),
                            NameEN = "Otorhinolaryngology",
                            NameTR = "Kulak Burun Boğaz"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2613),
                            NameEN = "Orthopedics and Traumatology",
                            NameTR = "Ortopedi ve Travmatoloji"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2614),
                            NameEN = "Urology",
                            NameTR = "Üroloji"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2615),
                            NameEN = "Pediatrics",
                            NameTR = "Çocuk Sağlığı ve Hastalıkları"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3823),
                            Name = "Kardiyoloji Araştırmaları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3832),
                            Name = "Çocuk Sağlığı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3836),
                            Name = "Onkoloji Tedavi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3840),
                            Name = "Nöroloji ve Beyin Cerrahisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3844),
                            Name = "Endokrinoloji ve Metabolizma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3849),
                            Name = "Gastroenteroloji ve Sindirim Sistemi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3853),
                            Name = "Psikiyatri ve Mental Sağlık"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3857),
                            Name = "Aile Hekimliği ve Birinci Basamak Sağlık Hizmetleri"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3861),
                            Name = "Parkinson Hastalığı"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(3866),
                            Name = "Bunama"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2807),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2817),
                            Name = "Appointment.Delete"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2821),
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3422)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3500)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationFindings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(4062),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(4070),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(4075),
                            Diagnosis = "Diabetes Mellitus",
                            ExaminationFindings = "Fasting blood sugar level of 140 mg/dL"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(4079),
                            Diagnosis = "Chronic Obstructive Pulmonary Disease (COPD)",
                            ExaminationFindings = "Reduced lung function on spirometry"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3289),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 50, 98, 238, 109, 154, 97, 123, 128, 149, 99, 167, 9, 119, 145, 11, 58, 202, 209, 0, 218, 42, 34, 43, 86, 61, 138, 163, 164, 163, 193, 138, 225, 218, 148, 208, 130, 154, 10, 45, 75, 228, 121, 136, 185, 4, 29, 152, 52, 63, 105, 184, 30, 186, 253, 57, 159, 21, 103, 107, 50, 179, 83, 182, 64 },
                            PasswordSalt = new byte[] { 230, 193, 237, 20, 154, 21, 91, 193, 221, 228, 36, 178, 77, 146, 66, 147, 136, 67, 47, 191, 190, 127, 78, 12, 200, 199, 138, 48, 87, 74, 78, 255, 8, 151, 38, 137, 106, 178, 190, 187, 0, 64, 78, 207, 141, 237, 241, 125, 248, 221, 118, 43, 79, 226, 167, 69, 169, 21, 50, 27, 79, 18, 0, 90, 49, 112, 150, 66, 76, 221, 99, 166, 122, 236, 89, 197, 129, 214, 81, 52, 246, 157, 249, 15, 203, 206, 24, 206, 43, 114, 229, 13, 184, 88, 96, 169, 171, 209, 18, 94, 151, 109, 191, 51, 199, 190, 109, 50, 236, 52, 19, 244, 119, 27, 102, 0, 132, 246, 102, 15, 87, 164, 19, 123, 233, 220, 131, 161 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3299),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 50, 98, 238, 109, 154, 97, 123, 128, 149, 99, 167, 9, 119, 145, 11, 58, 202, 209, 0, 218, 42, 34, 43, 86, 61, 138, 163, 164, 163, 193, 138, 225, 218, 148, 208, 130, 154, 10, 45, 75, 228, 121, 136, 185, 4, 29, 152, 52, 63, 105, 184, 30, 186, 253, 57, 159, 21, 103, 107, 50, 179, 83, 182, 64 },
                            PasswordSalt = new byte[] { 230, 193, 237, 20, 154, 21, 91, 193, 221, 228, 36, 178, 77, 146, 66, 147, 136, 67, 47, 191, 190, 127, 78, 12, 200, 199, 138, 48, 87, 74, 78, 255, 8, 151, 38, 137, 106, 178, 190, 187, 0, 64, 78, 207, 141, 237, 241, 125, 248, 221, 118, 43, 79, 226, 167, 69, 169, 21, 50, 27, 79, 18, 0, 90, 49, 112, 150, 66, 76, 221, 99, 166, 122, 236, 89, 197, 129, 214, 81, 52, 246, 157, 249, 15, 203, 206, 24, 206, 43, 114, 229, 13, 184, 88, 96, 169, 171, 209, 18, 94, 151, 109, 191, 51, 199, 190, 109, 50, 236, 52, 19, 244, 119, 27, 102, 0, 132, 246, 102, 15, 87, 164, 19, 123, 233, 220, 131, 161 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3305),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 50, 98, 238, 109, 154, 97, 123, 128, 149, 99, 167, 9, 119, 145, 11, 58, 202, 209, 0, 218, 42, 34, 43, 86, 61, 138, 163, 164, 163, 193, 138, 225, 218, 148, 208, 130, 154, 10, 45, 75, 228, 121, 136, 185, 4, 29, 152, 52, 63, 105, 184, 30, 186, 253, 57, 159, 21, 103, 107, 50, 179, 83, 182, 64 },
                            PasswordSalt = new byte[] { 230, 193, 237, 20, 154, 21, 91, 193, 221, 228, 36, 178, 77, 146, 66, 147, 136, 67, 47, 191, 190, 127, 78, 12, 200, 199, 138, 48, 87, 74, 78, 255, 8, 151, 38, 137, 106, 178, 190, 187, 0, 64, 78, 207, 141, 237, 241, 125, 248, 221, 118, 43, 79, 226, 167, 69, 169, 21, 50, 27, 79, 18, 0, 90, 49, 112, 150, 66, 76, 221, 99, 166, 122, 236, 89, 197, 129, 214, 81, 52, 246, 157, 249, 15, 203, 206, 24, 206, 43, 114, 229, 13, 184, 88, 96, 169, 171, 209, 18, 94, 151, 109, 191, 51, 199, 190, 109, 50, 236, 52, 19, 244, 119, 27, 102, 0, 132, 246, 102, 15, 87, 164, 19, 123, 233, 220, 131, 161 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3310),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 50, 98, 238, 109, 154, 97, 123, 128, 149, 99, 167, 9, 119, 145, 11, 58, 202, 209, 0, 218, 42, 34, 43, 86, 61, 138, 163, 164, 163, 193, 138, 225, 218, 148, 208, 130, 154, 10, 45, 75, 228, 121, 136, 185, 4, 29, 152, 52, 63, 105, 184, 30, 186, 253, 57, 159, 21, 103, 107, 50, 179, 83, 182, 64 },
                            PasswordSalt = new byte[] { 230, 193, 237, 20, 154, 21, 91, 193, 221, 228, 36, 178, 77, 146, 66, 147, 136, 67, 47, 191, 190, 127, 78, 12, 200, 199, 138, 48, 87, 74, 78, 255, 8, 151, 38, 137, 106, 178, 190, 187, 0, 64, 78, 207, 141, 237, 241, 125, 248, 221, 118, 43, 79, 226, 167, 69, 169, 21, 50, 27, 79, 18, 0, 90, 49, 112, 150, 66, 76, 221, 99, 166, 122, 236, 89, 197, 129, 214, 81, 52, 246, 157, 249, 15, 203, 206, 24, 206, 43, 114, 229, 13, 184, 88, 96, 169, 171, 209, 18, 94, 151, 109, 191, 51, 199, 190, 109, 50, 236, 52, 19, 244, 119, 27, 102, 0, 132, 246, 102, 15, 87, 164, 19, 123, 233, 220, 131, 161 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 24, 17, 53, 52, 658, DateTimeKind.Utc).AddTicks(3315),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 50, 98, 238, 109, 154, 97, 123, 128, 149, 99, 167, 9, 119, 145, 11, 58, 202, 209, 0, 218, 42, 34, 43, 86, 61, 138, 163, 164, 163, 193, 138, 225, 218, 148, 208, 130, 154, 10, 45, 75, 228, 121, 136, 185, 4, 29, 152, 52, 63, 105, 184, 30, 186, 253, 57, 159, 21, 103, 107, 50, 179, 83, 182, 64 },
                            PasswordSalt = new byte[] { 230, 193, 237, 20, 154, 21, 91, 193, 221, 228, 36, 178, 77, 146, 66, 147, 136, 67, 47, 191, 190, 127, 78, 12, 200, 199, 138, 48, 87, 74, 78, 255, 8, 151, 38, 137, 106, 178, 190, 187, 0, 64, 78, 207, 141, 237, 241, 125, 248, 221, 118, 43, 79, 226, 167, 69, 169, 21, 50, 27, 79, 18, 0, 90, 49, 112, 150, 66, 76, 221, 99, 166, 122, 236, 89, 197, 129, 214, 81, 52, 246, 157, 249, 15, 203, 206, 24, 206, 43, 114, 229, 13, 184, 88, 96, 169, 171, 209, 18, 94, 151, 109, 191, 51, 199, 190, 109, 50, 236, 52, 19, 244, 119, 27, 102, 0, 132, 246, 102, 15, 87, 164, 19, 123, 233, 220, 131, 161 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2914),
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2921),
                            OperationClaimId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2925),
                            OperationClaimId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 24, 20, 53, 52, 658, DateTimeKind.Local).AddTicks(2929),
                            OperationClaimId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorInterest")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Interest", "Interest")
                        .WithMany("DoctorInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("Domain.Entities.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("DoctorInterest");
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Navigation("DoctorInterests");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
