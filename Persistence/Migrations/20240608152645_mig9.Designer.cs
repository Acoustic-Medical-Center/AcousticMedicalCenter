// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240608152645_mig9")]
    partial class mig9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(219),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(225),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 26, 45, 216, DateTimeKind.Local).AddTicks(9336),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 26, 45, 216, DateTimeKind.Local).AddTicks(9373),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 26, 45, 216, DateTimeKind.Local).AddTicks(9563),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 26, 45, 216, DateTimeKind.Local).AddTicks(9570),
                            Name = "Appointment.Delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(129)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(136)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 195, 205, 193, 97, 88, 190, 181, 210, 16, 8, 12, 33, 133, 220, 172, 245, 100, 184, 218, 61, 242, 209, 142, 76, 196, 238, 219, 111, 102, 106, 157, 96, 186, 186, 104, 229, 20, 60, 77, 38, 191, 97, 64, 2, 121, 171, 221, 57, 129, 248, 51, 38, 33, 157, 104, 59, 194, 95, 101, 250, 77, 108, 242, 55 },
                            PasswordSalt = new byte[] { 10, 88, 136, 78, 145, 170, 59, 236, 69, 74, 147, 245, 255, 164, 102, 96, 139, 118, 239, 143, 237, 155, 104, 56, 194, 194, 91, 78, 218, 248, 63, 231, 138, 101, 92, 104, 5, 134, 208, 223, 56, 250, 135, 185, 54, 28, 17, 72, 89, 36, 166, 175, 173, 119, 229, 51, 255, 56, 136, 128, 107, 60, 9, 118, 166, 176, 92, 133, 31, 141, 191, 197, 107, 220, 33, 41, 223, 131, 222, 137, 98, 179, 3, 70, 217, 164, 21, 143, 187, 145, 140, 141, 236, 238, 11, 166, 239, 146, 201, 70, 71, 21, 165, 34, 234, 16, 48, 112, 110, 183, 182, 199, 86, 32, 133, 250, 180, 171, 183, 213, 79, 230, 66, 173, 136, 173, 177, 102 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(11),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 195, 205, 193, 97, 88, 190, 181, 210, 16, 8, 12, 33, 133, 220, 172, 245, 100, 184, 218, 61, 242, 209, 142, 76, 196, 238, 219, 111, 102, 106, 157, 96, 186, 186, 104, 229, 20, 60, 77, 38, 191, 97, 64, 2, 121, 171, 221, 57, 129, 248, 51, 38, 33, 157, 104, 59, 194, 95, 101, 250, 77, 108, 242, 55 },
                            PasswordSalt = new byte[] { 10, 88, 136, 78, 145, 170, 59, 236, 69, 74, 147, 245, 255, 164, 102, 96, 139, 118, 239, 143, 237, 155, 104, 56, 194, 194, 91, 78, 218, 248, 63, 231, 138, 101, 92, 104, 5, 134, 208, 223, 56, 250, 135, 185, 54, 28, 17, 72, 89, 36, 166, 175, 173, 119, 229, 51, 255, 56, 136, 128, 107, 60, 9, 118, 166, 176, 92, 133, 31, 141, 191, 197, 107, 220, 33, 41, 223, 131, 222, 137, 98, 179, 3, 70, 217, 164, 21, 143, 187, 145, 140, 141, 236, 238, 11, 166, 239, 146, 201, 70, 71, 21, 165, 34, 234, 16, 48, 112, 110, 183, 182, 199, 86, 32, 133, 250, 180, 171, 183, 213, 79, 230, 66, 173, 136, 173, 177, 102 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(15),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 195, 205, 193, 97, 88, 190, 181, 210, 16, 8, 12, 33, 133, 220, 172, 245, 100, 184, 218, 61, 242, 209, 142, 76, 196, 238, 219, 111, 102, 106, 157, 96, 186, 186, 104, 229, 20, 60, 77, 38, 191, 97, 64, 2, 121, 171, 221, 57, 129, 248, 51, 38, 33, 157, 104, 59, 194, 95, 101, 250, 77, 108, 242, 55 },
                            PasswordSalt = new byte[] { 10, 88, 136, 78, 145, 170, 59, 236, 69, 74, 147, 245, 255, 164, 102, 96, 139, 118, 239, 143, 237, 155, 104, 56, 194, 194, 91, 78, 218, 248, 63, 231, 138, 101, 92, 104, 5, 134, 208, 223, 56, 250, 135, 185, 54, 28, 17, 72, 89, 36, 166, 175, 173, 119, 229, 51, 255, 56, 136, 128, 107, 60, 9, 118, 166, 176, 92, 133, 31, 141, 191, 197, 107, 220, 33, 41, 223, 131, 222, 137, 98, 179, 3, 70, 217, 164, 21, 143, 187, 145, 140, 141, 236, 238, 11, 166, 239, 146, 201, 70, 71, 21, 165, 34, 234, 16, 48, 112, 110, 183, 182, 199, 86, 32, 133, 250, 180, 171, 183, 213, 79, 230, 66, 173, 136, 173, 177, 102 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(19),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 195, 205, 193, 97, 88, 190, 181, 210, 16, 8, 12, 33, 133, 220, 172, 245, 100, 184, 218, 61, 242, 209, 142, 76, 196, 238, 219, 111, 102, 106, 157, 96, 186, 186, 104, 229, 20, 60, 77, 38, 191, 97, 64, 2, 121, 171, 221, 57, 129, 248, 51, 38, 33, 157, 104, 59, 194, 95, 101, 250, 77, 108, 242, 55 },
                            PasswordSalt = new byte[] { 10, 88, 136, 78, 145, 170, 59, 236, 69, 74, 147, 245, 255, 164, 102, 96, 139, 118, 239, 143, 237, 155, 104, 56, 194, 194, 91, 78, 218, 248, 63, 231, 138, 101, 92, 104, 5, 134, 208, 223, 56, 250, 135, 185, 54, 28, 17, 72, 89, 36, 166, 175, 173, 119, 229, 51, 255, 56, 136, 128, 107, 60, 9, 118, 166, 176, 92, 133, 31, 141, 191, 197, 107, 220, 33, 41, 223, 131, 222, 137, 98, 179, 3, 70, 217, 164, 21, 143, 187, 145, 140, 141, 236, 238, 11, 166, 239, 146, 201, 70, 71, 21, 165, 34, 234, 16, 48, 112, 110, 183, 182, 199, 86, 32, 133, 250, 180, 171, 183, 213, 79, 230, 66, 173, 136, 173, 177, 102 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 26, 45, 217, DateTimeKind.Utc).AddTicks(23),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 195, 205, 193, 97, 88, 190, 181, 210, 16, 8, 12, 33, 133, 220, 172, 245, 100, 184, 218, 61, 242, 209, 142, 76, 196, 238, 219, 111, 102, 106, 157, 96, 186, 186, 104, 229, 20, 60, 77, 38, 191, 97, 64, 2, 121, 171, 221, 57, 129, 248, 51, 38, 33, 157, 104, 59, 194, 95, 101, 250, 77, 108, 242, 55 },
                            PasswordSalt = new byte[] { 10, 88, 136, 78, 145, 170, 59, 236, 69, 74, 147, 245, 255, 164, 102, 96, 139, 118, 239, 143, 237, 155, 104, 56, 194, 194, 91, 78, 218, 248, 63, 231, 138, 101, 92, 104, 5, 134, 208, 223, 56, 250, 135, 185, 54, 28, 17, 72, 89, 36, 166, 175, 173, 119, 229, 51, 255, 56, 136, 128, 107, 60, 9, 118, 166, 176, 92, 133, 31, 141, 191, 197, 107, 220, 33, 41, 223, 131, 222, 137, 98, 179, 3, 70, 217, 164, 21, 143, 187, 145, 140, 141, 236, 238, 11, 166, 239, 146, 201, 70, 71, 21, 165, 34, 234, 16, 48, 112, 110, 183, 182, 199, 86, 32, 133, 250, 180, 171, 183, 213, 79, 230, 66, 173, 136, 173, 177, 102 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
