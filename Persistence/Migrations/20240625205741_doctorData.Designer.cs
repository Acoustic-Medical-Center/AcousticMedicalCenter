// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240625205741_doctorData")]
    partial class doctorData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTime = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3561),
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3563),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTime = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3595),
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3596),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTime = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3600),
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3601),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTime = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3605),
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3605),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Biography = "Id 3 olan Doktor Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3421),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3427),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Göz Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3428),
                            DoctorSpecializationId = 7,
                            Experience = 3
                        },
                        new
                        {
                            Id = 6,
                            Biography = "Ortopedi Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3430),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 7,
                            Biography = "Dahiliye Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3431),
                            DoctorSpecializationId = 4,
                            Experience = 8
                        },
                        new
                        {
                            Id = 8,
                            Biography = "Nöroloji Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3432),
                            DoctorSpecializationId = 6,
                            Experience = 6
                        },
                        new
                        {
                            Id = 9,
                            Biography = "Psikiyatri Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3433),
                            DoctorSpecializationId = 9,
                            Experience = 7
                        },
                        new
                        {
                            Id = 10,
                            Biography = "Pediatri Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3434),
                            DoctorSpecializationId = 5,
                            Experience = 2
                        },
                        new
                        {
                            Id = 11,
                            Biography = "Dermatoloji Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3436),
                            DoctorSpecializationId = 10,
                            Experience = 4
                        },
                        new
                        {
                            Id = 12,
                            Biography = "Kulak Burun Boğaz Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3437),
                            DoctorSpecializationId = 8,
                            Experience = 9
                        },
                        new
                        {
                            Id = 13,
                            Biography = "Genel Cerrahi Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3438),
                            DoctorSpecializationId = 3,
                            Experience = 6
                        },
                        new
                        {
                            Id = 14,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3439),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        },
                        new
                        {
                            Id = 15,
                            Biography = "Göz Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3440),
                            DoctorSpecializationId = 7,
                            Experience = 3
                        },
                        new
                        {
                            Id = 16,
                            Biography = "Ortopedi Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3441),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 17,
                            Biography = "Dahiliye Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3442),
                            DoctorSpecializationId = 4,
                            Experience = 8
                        },
                        new
                        {
                            Id = 18,
                            Biography = "Nöroloji Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3443),
                            DoctorSpecializationId = 6,
                            Experience = 6
                        },
                        new
                        {
                            Id = 19,
                            Biography = "Psikiyatri Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3445),
                            DoctorSpecializationId = 9,
                            Experience = 7
                        },
                        new
                        {
                            Id = 20,
                            Biography = "Pediatri Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3446),
                            DoctorSpecializationId = 5,
                            Experience = 2
                        },
                        new
                        {
                            Id = 21,
                            Biography = "Dermatoloji Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3447),
                            DoctorSpecializationId = 10,
                            Experience = 4
                        },
                        new
                        {
                            Id = 22,
                            Biography = "Kulak Burun Boğaz Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3448),
                            DoctorSpecializationId = 8,
                            Experience = 9
                        },
                        new
                        {
                            Id = 23,
                            Biography = "Genel Cerrahi Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3449),
                            DoctorSpecializationId = 3,
                            Experience = 6
                        },
                        new
                        {
                            Id = 24,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3451),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        },
                        new
                        {
                            Id = 25,
                            Biography = "Ortopedi Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3452),
                            DoctorSpecializationId = 1,
                            Experience = 4
                        },
                        new
                        {
                            Id = 26,
                            Biography = "Pediatri Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3453),
                            DoctorSpecializationId = 5,
                            Experience = 7
                        },
                        new
                        {
                            Id = 27,
                            Biography = "Kulak Burun Boğaz Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3454),
                            DoctorSpecializationId = 8,
                            Experience = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("DoctorInterests");

                    b.HasData(
                        new
                        {
                            DoctorId = 3,
                            InterestId = 1
                        },
                        new
                        {
                            DoctorId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 7
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameTR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2304),
                            NameEN = "Neurosurgery",
                            NameTR = "Beyin ve Sinir Cerrahisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2312),
                            NameEN = "Dermatology",
                            NameTR = "Dermatoloji"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2314),
                            NameEN = "General Surgery",
                            NameTR = "Genel Cerrahi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2315),
                            NameEN = "Ophthalmology",
                            NameTR = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2316),
                            NameEN = "Internal Medicine",
                            NameTR = "İç Hastalıkları"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2318),
                            NameEN = "Obstetrics and Gynecology",
                            NameTR = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2319),
                            NameEN = "Otorhinolaryngology",
                            NameTR = "Kulak Burun Boğaz"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2320),
                            NameEN = "Orthopedics and Traumatology",
                            NameTR = "Ortopedi ve Travmatoloji"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2321),
                            NameEN = "Urology",
                            NameTR = "Üroloji"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2323),
                            NameEN = "Pediatrics",
                            NameTR = "Çocuk Sağlığı ve Hastalıkları"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3698),
                            Name = "Kardiyoloji Araştırmaları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3705),
                            Name = "Çocuk Sağlığı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3709),
                            Name = "Onkoloji Tedavi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3712),
                            Name = "Nöroloji ve Beyin Cerrahisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3716),
                            Name = "Endokrinoloji ve Metabolizma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3721),
                            Name = "Gastroenteroloji ve Sindirim Sistemi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3724),
                            Name = "Psikiyatri ve Mental Sağlık"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3727),
                            Name = "Aile Hekimliği ve Birinci Basamak Sağlık Hizmetleri"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3730),
                            Name = "Parkinson Hastalığı"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(3735),
                            Name = "Bunama"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2518),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2527),
                            Name = "Appointment.Delete"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2532),
                            Name = "Doctor"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3319)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3327)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MedicationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationFindings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(4065),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(4075),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(4079),
                            Diagnosis = "Diabetes Mellitus",
                            ExaminationFindings = "Fasting blood sugar level of 140 mg/dL"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(4082),
                            Diagnosis = "Chronic Obstructive Pulmonary Disease (COPD)",
                            ExaminationFindings = "Reduced lung function on spirometry"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3061),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3071),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3075),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3080),
                            Email = "doktor4@example.com",
                            FirstName = "Fatma",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Koç",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500004",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3082),
                            Email = "doktor5@example.com",
                            FirstName = "Mehmet",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Öz",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500005",
                            UserType = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3084),
                            Email = "doktor6@example.com",
                            FirstName = "Canan",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Çelik",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500006",
                            UserType = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3085),
                            Email = "doktor7@example.com",
                            FirstName = "Emre",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Arı",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500007",
                            UserType = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3087),
                            Email = "doktor8@example.com",
                            FirstName = "Burak",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Temiz",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500008",
                            UserType = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3089),
                            Email = "doktor9@example.com",
                            FirstName = "Seda",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Ak",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500009",
                            UserType = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3091),
                            Email = "doktor10@example.com",
                            FirstName = "Murat",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Tez",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500010",
                            UserType = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3137),
                            Email = "doktor11@example.com",
                            FirstName = "Zeynep",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Bal",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500011",
                            UserType = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3139),
                            Email = "doktor12@example.com",
                            FirstName = "Kemal",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Sağ",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500012",
                            UserType = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3141),
                            Email = "doktor13@example.com",
                            FirstName = "Cansu",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Dur",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500013",
                            UserType = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3143),
                            Email = "doktor14@example.com",
                            FirstName = "Oğuz",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Kurt",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500014",
                            UserType = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3145),
                            Email = "doktor15@example.com",
                            FirstName = "Esra",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Deniz",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500015",
                            UserType = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3147),
                            Email = "doktor16@example.com",
                            FirstName = "Baran",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Gül",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500016",
                            UserType = 1
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3149),
                            Email = "doktor17@example.com",
                            FirstName = "Duygu",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Aydın",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500017",
                            UserType = 1
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3151),
                            Email = "doktor18@example.com",
                            FirstName = "Tarkan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Kara",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500018",
                            UserType = 1
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3153),
                            Email = "doktor19@example.com",
                            FirstName = "Nil",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Koç",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500019",
                            UserType = 1
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3154),
                            Email = "doktor20@example.com",
                            FirstName = "Sami",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Öztürk",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500020",
                            UserType = 1
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3156),
                            Email = "doktor21@example.com",
                            FirstName = "Ece",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Uzun",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500021",
                            UserType = 1
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3158),
                            Email = "doktor22@example.com",
                            FirstName = "Levent",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yıldız",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500022",
                            UserType = 1
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3160),
                            Email = "doktor23@example.com",
                            FirstName = "Selin",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Demirci",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500023",
                            UserType = 1
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3162),
                            Email = "doktor24@example.com",
                            FirstName = "Onur",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Akar",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500024",
                            UserType = 1
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3163),
                            Email = "doktor25@example.com",
                            FirstName = "İrem",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Dere",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500025",
                            UserType = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3165),
                            Email = "doktor26@example.com",
                            FirstName = "Cenk",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Taş",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500026",
                            UserType = 1
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3167),
                            Email = "doktor27@example.com",
                            FirstName = "Hande",
                            Gender = "Female",
                            IsDeleted = false,
                            LastName = "Yener",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234500027",
                            UserType = 1
                        },
                        new
                        {
                            Id = 99,
                            CreatedDate = new DateTime(2024, 6, 25, 20, 57, 41, 420, DateTimeKind.Utc).AddTicks(3189),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 155, 201, 18, 146, 255, 67, 195, 242, 247, 159, 248, 166, 118, 201, 227, 23, 76, 235, 37, 172, 50, 143, 217, 37, 162, 7, 75, 187, 64, 59, 113, 171, 77, 247, 23, 227, 103, 154, 182, 132, 118, 140, 7, 26, 79, 164, 45, 199, 193, 123, 69, 17, 232, 165, 197, 157, 124, 232, 212, 179, 77, 247, 67, 83 },
                            PasswordSalt = new byte[] { 136, 115, 64, 99, 107, 19, 52, 19, 49, 208, 50, 103, 100, 95, 142, 141, 45, 222, 163, 67, 49, 120, 125, 255, 80, 156, 95, 188, 227, 98, 233, 255, 193, 110, 195, 92, 79, 90, 48, 183, 234, 253, 5, 58, 20, 51, 51, 182, 196, 144, 16, 81, 175, 236, 75, 38, 241, 230, 140, 223, 167, 87, 95, 81, 129, 129, 120, 246, 233, 220, 135, 236, 128, 187, 71, 43, 158, 154, 56, 54, 187, 227, 155, 96, 64, 70, 60, 250, 248, 242, 10, 142, 131, 216, 224, 169, 185, 66, 195, 100, 148, 73, 25, 131, 149, 200, 21, 182, 212, 52, 127, 101, 173, 154, 58, 89, 105, 204, 246, 68, 235, 93, 160, 232, 107, 168, 134, 66 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2635),
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2643),
                            OperationClaimId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2648),
                            OperationClaimId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 25, 23, 57, 41, 420, DateTimeKind.Local).AddTicks(2652),
                            OperationClaimId = 3,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorInterest")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Interest", "Interest")
                        .WithMany("DoctorInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("Domain.Entities.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("DoctorInterest");
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Navigation("DoctorInterests");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
