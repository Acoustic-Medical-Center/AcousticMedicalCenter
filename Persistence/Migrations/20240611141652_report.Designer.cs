// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240611141652_report")]
    partial class report
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTime = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1632),
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1633),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTime = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1642),
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1643),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTime = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1646),
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1647),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTime = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1651),
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1651),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Biography = "Id 3 olan Doktor Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1496),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Kalp Doktoru Özgeçmiş Example",
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1506),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("InterestId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId", "InterestId");

                    b.HasIndex("InterestId");

                    b.ToTable("DoctorInterests");

                    b.HasData(
                        new
                        {
                            DoctorId = 3,
                            InterestId = 1
                        },
                        new
                        {
                            DoctorId = 3,
                            InterestId = 2
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 7
                        },
                        new
                        {
                            DoctorId = 4,
                            InterestId = 8
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(248),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(277),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Interests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1756),
                            Name = "Kardiyoloji Araştırmaları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1767),
                            Name = "Çocuk Sağlığı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1770),
                            Name = "Onkoloji Tedavi"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1774),
                            Name = "Nöroloji ve Beyin Cerrahisi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1778),
                            Name = "Endokrinoloji ve Metabolizma"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1783),
                            Name = "Gastroenteroloji ve Sindirim Sistemi"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1786),
                            Name = "Psikiyatri ve Mental Sağlık"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1789),
                            Name = "Aile Hekimliği ve Birinci Basamak Sağlık Hizmetleri"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1793),
                            Name = "Parkinson Hastalığı"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(1797),
                            Name = "Bunama"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(464),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(474),
                            Name = "Appointment.Delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1374)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1383)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExaminationFindings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(2024),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(2033),
                            Diagnosis = " Hipertansiyon",
                            ExaminationFindings = "Yüksek kan basıncı"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(2036),
                            Diagnosis = "Diabetes Mellitus",
                            ExaminationFindings = "Fasting blood sugar level of 140 mg/dL"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(2040),
                            Diagnosis = "Chronic Obstructive Pulmonary Disease (COPD)",
                            ExaminationFindings = "Reduced lung function on spirometry"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1185),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 170, 192, 204, 105, 81, 147, 68, 210, 127, 92, 160, 253, 45, 228, 136, 217, 156, 93, 92, 38, 117, 52, 192, 250, 169, 55, 210, 245, 72, 75, 193, 214, 71, 96, 90, 164, 25, 207, 119, 71, 213, 157, 60, 48, 98, 114, 252, 95, 58, 154, 177, 27, 206, 161, 193, 133, 111, 165, 194, 37, 179, 185, 44, 7 },
                            PasswordSalt = new byte[] { 218, 231, 197, 94, 76, 143, 61, 13, 253, 13, 158, 116, 224, 231, 12, 72, 63, 184, 198, 242, 135, 77, 126, 50, 3, 127, 179, 99, 53, 222, 95, 160, 168, 125, 125, 156, 204, 33, 221, 124, 110, 184, 140, 87, 89, 129, 176, 86, 2, 191, 5, 175, 74, 0, 34, 225, 170, 247, 167, 211, 191, 71, 80, 98, 57, 74, 34, 157, 67, 116, 162, 85, 216, 147, 99, 92, 179, 109, 254, 163, 99, 68, 205, 61, 234, 88, 152, 69, 193, 44, 9, 254, 93, 195, 112, 30, 97, 96, 46, 90, 2, 116, 238, 246, 175, 237, 238, 115, 10, 132, 229, 27, 77, 162, 251, 38, 70, 191, 255, 164, 34, 155, 157, 96, 180, 19, 162, 233 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1195),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 170, 192, 204, 105, 81, 147, 68, 210, 127, 92, 160, 253, 45, 228, 136, 217, 156, 93, 92, 38, 117, 52, 192, 250, 169, 55, 210, 245, 72, 75, 193, 214, 71, 96, 90, 164, 25, 207, 119, 71, 213, 157, 60, 48, 98, 114, 252, 95, 58, 154, 177, 27, 206, 161, 193, 133, 111, 165, 194, 37, 179, 185, 44, 7 },
                            PasswordSalt = new byte[] { 218, 231, 197, 94, 76, 143, 61, 13, 253, 13, 158, 116, 224, 231, 12, 72, 63, 184, 198, 242, 135, 77, 126, 50, 3, 127, 179, 99, 53, 222, 95, 160, 168, 125, 125, 156, 204, 33, 221, 124, 110, 184, 140, 87, 89, 129, 176, 86, 2, 191, 5, 175, 74, 0, 34, 225, 170, 247, 167, 211, 191, 71, 80, 98, 57, 74, 34, 157, 67, 116, 162, 85, 216, 147, 99, 92, 179, 109, 254, 163, 99, 68, 205, 61, 234, 88, 152, 69, 193, 44, 9, 254, 93, 195, 112, 30, 97, 96, 46, 90, 2, 116, 238, 246, 175, 237, 238, 115, 10, 132, 229, 27, 77, 162, 251, 38, 70, 191, 255, 164, 34, 155, 157, 96, 180, 19, 162, 233 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1199),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 170, 192, 204, 105, 81, 147, 68, 210, 127, 92, 160, 253, 45, 228, 136, 217, 156, 93, 92, 38, 117, 52, 192, 250, 169, 55, 210, 245, 72, 75, 193, 214, 71, 96, 90, 164, 25, 207, 119, 71, 213, 157, 60, 48, 98, 114, 252, 95, 58, 154, 177, 27, 206, 161, 193, 133, 111, 165, 194, 37, 179, 185, 44, 7 },
                            PasswordSalt = new byte[] { 218, 231, 197, 94, 76, 143, 61, 13, 253, 13, 158, 116, 224, 231, 12, 72, 63, 184, 198, 242, 135, 77, 126, 50, 3, 127, 179, 99, 53, 222, 95, 160, 168, 125, 125, 156, 204, 33, 221, 124, 110, 184, 140, 87, 89, 129, 176, 86, 2, 191, 5, 175, 74, 0, 34, 225, 170, 247, 167, 211, 191, 71, 80, 98, 57, 74, 34, 157, 67, 116, 162, 85, 216, 147, 99, 92, 179, 109, 254, 163, 99, 68, 205, 61, 234, 88, 152, 69, 193, 44, 9, 254, 93, 195, 112, 30, 97, 96, 46, 90, 2, 116, 238, 246, 175, 237, 238, 115, 10, 132, 229, 27, 77, 162, 251, 38, 70, 191, 255, 164, 34, 155, 157, 96, 180, 19, 162, 233 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1204),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 170, 192, 204, 105, 81, 147, 68, 210, 127, 92, 160, 253, 45, 228, 136, 217, 156, 93, 92, 38, 117, 52, 192, 250, 169, 55, 210, 245, 72, 75, 193, 214, 71, 96, 90, 164, 25, 207, 119, 71, 213, 157, 60, 48, 98, 114, 252, 95, 58, 154, 177, 27, 206, 161, 193, 133, 111, 165, 194, 37, 179, 185, 44, 7 },
                            PasswordSalt = new byte[] { 218, 231, 197, 94, 76, 143, 61, 13, 253, 13, 158, 116, 224, 231, 12, 72, 63, 184, 198, 242, 135, 77, 126, 50, 3, 127, 179, 99, 53, 222, 95, 160, 168, 125, 125, 156, 204, 33, 221, 124, 110, 184, 140, 87, 89, 129, 176, 86, 2, 191, 5, 175, 74, 0, 34, 225, 170, 247, 167, 211, 191, 71, 80, 98, 57, 74, 34, 157, 67, 116, 162, 85, 216, 147, 99, 92, 179, 109, 254, 163, 99, 68, 205, 61, 234, 88, 152, 69, 193, 44, 9, 254, 93, 195, 112, 30, 97, 96, 46, 90, 2, 116, 238, 246, 175, 237, 238, 115, 10, 132, 229, 27, 77, 162, 251, 38, 70, 191, 255, 164, 34, 155, 157, 96, 180, 19, 162, 233 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 11, 14, 16, 51, 897, DateTimeKind.Utc).AddTicks(1247),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 170, 192, 204, 105, 81, 147, 68, 210, 127, 92, 160, 253, 45, 228, 136, 217, 156, 93, 92, 38, 117, 52, 192, 250, 169, 55, 210, 245, 72, 75, 193, 214, 71, 96, 90, 164, 25, 207, 119, 71, 213, 157, 60, 48, 98, 114, 252, 95, 58, 154, 177, 27, 206, 161, 193, 133, 111, 165, 194, 37, 179, 185, 44, 7 },
                            PasswordSalt = new byte[] { 218, 231, 197, 94, 76, 143, 61, 13, 253, 13, 158, 116, 224, 231, 12, 72, 63, 184, 198, 242, 135, 77, 126, 50, 3, 127, 179, 99, 53, 222, 95, 160, 168, 125, 125, 156, 204, 33, 221, 124, 110, 184, 140, 87, 89, 129, 176, 86, 2, 191, 5, 175, 74, 0, 34, 225, 170, 247, 167, 211, 191, 71, 80, 98, 57, 74, 34, 157, 67, 116, 162, 85, 216, 147, 99, 92, 179, 109, 254, 163, 99, 68, 205, 61, 234, 88, 152, 69, 193, 44, 9, 254, 93, 195, 112, 30, 97, 96, 46, 90, 2, 116, 238, 246, 175, 237, 238, 115, 10, 132, 229, 27, 77, 162, 251, 38, 70, 191, 255, 164, 34, 155, 157, 96, 180, 19, 162, 233 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(741),
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 11, 17, 16, 51, 897, DateTimeKind.Local).AddTicks(749),
                            OperationClaimId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.DoctorInterest", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Interests")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Interest", "Interest")
                        .WithMany("DoctorInterests")
                        .HasForeignKey("InterestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Interest");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Prescription", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("Domain.Entities.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Report")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Interests");
                });

            modelBuilder.Entity("Domain.Entities.Interest", b =>
                {
                    b.Navigation("DoctorInterests");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
