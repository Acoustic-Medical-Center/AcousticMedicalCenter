// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AcousticDbContext))]
    [Migration("20240608152708_mig10")]
    partial class mig10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorSpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorSpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4285),
                            DoctorSpecializationId = 1,
                            Experience = 10
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 0,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4327),
                            DoctorSpecializationId = 2,
                            Experience = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DoctorSpecializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 27, 8, 382, DateTimeKind.Local).AddTicks(3296),
                            Name = "Cerrah"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 27, 8, 382, DateTimeKind.Local).AddTicks(3331),
                            Name = "Kalp"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 27, 8, 382, DateTimeKind.Local).AddTicks(3527),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 27, 8, 382, DateTimeKind.Local).AddTicks(3537),
                            Name = "Appointment.Delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1234 Main St",
                            AppointmentId = 0,
                            BloodType = "A+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4189)
                        },
                        new
                        {
                            Id = 2,
                            Address = "1233 Main St",
                            AppointmentId = 0,
                            BloodType = "B+",
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4196)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4060),
                            Email = "hasta1@example.com",
                            FirstName = "John",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 67, 135, 224, 1, 165, 42, 89, 211, 19, 4, 91, 76, 150, 71, 31, 184, 201, 252, 92, 167, 66, 232, 3, 164, 113, 12, 95, 12, 29, 32, 107, 154, 233, 68, 147, 251, 194, 99, 44, 105, 146, 54, 253, 206, 54, 63, 5, 73, 190, 186, 59, 168, 27, 156, 168, 41, 233, 63, 80, 248, 186, 228, 4, 97 },
                            PasswordSalt = new byte[] { 217, 99, 238, 92, 4, 109, 73, 145, 40, 213, 162, 190, 141, 5, 129, 141, 95, 141, 7, 115, 235, 124, 222, 185, 125, 175, 164, 49, 209, 24, 226, 247, 160, 224, 35, 145, 132, 95, 192, 67, 147, 138, 230, 159, 179, 58, 4, 217, 68, 58, 45, 68, 27, 69, 3, 169, 134, 45, 15, 113, 168, 128, 134, 208, 195, 84, 197, 156, 151, 14, 29, 127, 117, 181, 26, 94, 81, 215, 205, 102, 172, 39, 154, 15, 166, 115, 135, 183, 196, 231, 4, 6, 60, 31, 110, 226, 155, 214, 111, 57, 42, 118, 230, 204, 120, 106, 185, 115, 192, 38, 228, 211, 133, 178, 181, 135, 218, 110, 154, 46, 243, 133, 251, 210, 182, 113, 44, 78 },
                            PhoneNumber = "1234567890",
                            UserType = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4069),
                            Email = "hasta2@example.com",
                            FirstName = "Jonathan",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Corwin",
                            PasswordHash = new byte[] { 67, 135, 224, 1, 165, 42, 89, 211, 19, 4, 91, 76, 150, 71, 31, 184, 201, 252, 92, 167, 66, 232, 3, 164, 113, 12, 95, 12, 29, 32, 107, 154, 233, 68, 147, 251, 194, 99, 44, 105, 146, 54, 253, 206, 54, 63, 5, 73, 190, 186, 59, 168, 27, 156, 168, 41, 233, 63, 80, 248, 186, 228, 4, 97 },
                            PasswordSalt = new byte[] { 217, 99, 238, 92, 4, 109, 73, 145, 40, 213, 162, 190, 141, 5, 129, 141, 95, 141, 7, 115, 235, 124, 222, 185, 125, 175, 164, 49, 209, 24, 226, 247, 160, 224, 35, 145, 132, 95, 192, 67, 147, 138, 230, 159, 179, 58, 4, 217, 68, 58, 45, 68, 27, 69, 3, 169, 134, 45, 15, 113, 168, 128, 134, 208, 195, 84, 197, 156, 151, 14, 29, 127, 117, 181, 26, 94, 81, 215, 205, 102, 172, 39, 154, 15, 166, 115, 135, 183, 196, 231, 4, 6, 60, 31, 110, 226, 155, 214, 111, 57, 42, 118, 230, 204, 120, 106, 185, 115, 192, 38, 228, 211, 133, 178, 181, 135, 218, 110, 154, 46, 243, 133, 251, 210, 182, 113, 44, 78 },
                            PhoneNumber = "1234512345",
                            UserType = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4073),
                            Email = "doktor1@example.com",
                            FirstName = "batu",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "cerrahlar",
                            PasswordHash = new byte[] { 67, 135, 224, 1, 165, 42, 89, 211, 19, 4, 91, 76, 150, 71, 31, 184, 201, 252, 92, 167, 66, 232, 3, 164, 113, 12, 95, 12, 29, 32, 107, 154, 233, 68, 147, 251, 194, 99, 44, 105, 146, 54, 253, 206, 54, 63, 5, 73, 190, 186, 59, 168, 27, 156, 168, 41, 233, 63, 80, 248, 186, 228, 4, 97 },
                            PasswordSalt = new byte[] { 217, 99, 238, 92, 4, 109, 73, 145, 40, 213, 162, 190, 141, 5, 129, 141, 95, 141, 7, 115, 235, 124, 222, 185, 125, 175, 164, 49, 209, 24, 226, 247, 160, 224, 35, 145, 132, 95, 192, 67, 147, 138, 230, 159, 179, 58, 4, 217, 68, 58, 45, 68, 27, 69, 3, 169, 134, 45, 15, 113, 168, 128, 134, 208, 195, 84, 197, 156, 151, 14, 29, 127, 117, 181, 26, 94, 81, 215, 205, 102, 172, 39, 154, 15, 166, 115, 135, 183, 196, 231, 4, 6, 60, 31, 110, 226, 155, 214, 111, 57, 42, 118, 230, 204, 120, 106, 185, 115, 192, 38, 228, 211, 133, 178, 181, 135, 218, 110, 154, 46, 243, 133, 251, 210, 182, 113, 44, 78 },
                            PhoneNumber = "1234512312",
                            UserType = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4076),
                            Email = "doktor2@example.com",
                            FirstName = "kalp",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "doktoru",
                            PasswordHash = new byte[] { 67, 135, 224, 1, 165, 42, 89, 211, 19, 4, 91, 76, 150, 71, 31, 184, 201, 252, 92, 167, 66, 232, 3, 164, 113, 12, 95, 12, 29, 32, 107, 154, 233, 68, 147, 251, 194, 99, 44, 105, 146, 54, 253, 206, 54, 63, 5, 73, 190, 186, 59, 168, 27, 156, 168, 41, 233, 63, 80, 248, 186, 228, 4, 97 },
                            PasswordSalt = new byte[] { 217, 99, 238, 92, 4, 109, 73, 145, 40, 213, 162, 190, 141, 5, 129, 141, 95, 141, 7, 115, 235, 124, 222, 185, 125, 175, 164, 49, 209, 24, 226, 247, 160, 224, 35, 145, 132, 95, 192, 67, 147, 138, 230, 159, 179, 58, 4, 217, 68, 58, 45, 68, 27, 69, 3, 169, 134, 45, 15, 113, 168, 128, 134, 208, 195, 84, 197, 156, 151, 14, 29, 127, 117, 181, 26, 94, 81, 215, 205, 102, 172, 39, 154, 15, 166, 115, 135, 183, 196, 231, 4, 6, 60, 31, 110, 226, 155, 214, 111, 57, 42, 118, 230, 204, 120, 106, 185, 115, 192, 38, 228, 211, 133, 178, 181, 135, 218, 110, 154, 46, 243, 133, 251, 210, 182, 113, 44, 78 },
                            PhoneNumber = "1234512313",
                            UserType = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 8, 15, 27, 8, 382, DateTimeKind.Utc).AddTicks(4080),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Gender = "Male",
                            IsDeleted = false,
                            LastName = "Yöneticioğlu",
                            PasswordHash = new byte[] { 67, 135, 224, 1, 165, 42, 89, 211, 19, 4, 91, 76, 150, 71, 31, 184, 201, 252, 92, 167, 66, 232, 3, 164, 113, 12, 95, 12, 29, 32, 107, 154, 233, 68, 147, 251, 194, 99, 44, 105, 146, 54, 253, 206, 54, 63, 5, 73, 190, 186, 59, 168, 27, 156, 168, 41, 233, 63, 80, 248, 186, 228, 4, 97 },
                            PasswordSalt = new byte[] { 217, 99, 238, 92, 4, 109, 73, 145, 40, 213, 162, 190, 141, 5, 129, 141, 95, 141, 7, 115, 235, 124, 222, 185, 125, 175, 164, 49, 209, 24, 226, 247, 160, 224, 35, 145, 132, 95, 192, 67, 147, 138, 230, 159, 179, 58, 4, 217, 68, 58, 45, 68, 27, 69, 3, 169, 134, 45, 15, 113, 168, 128, 134, 208, 195, 84, 197, 156, 151, 14, 29, 127, 117, 181, 26, 94, 81, 215, 205, 102, 172, 39, 154, 15, 166, 115, 135, 183, 196, 231, 4, 6, 60, 31, 110, 226, 155, 214, 111, 57, 42, 118, 230, 204, 120, 106, 185, 115, 192, 38, 228, 211, 133, 178, 181, 135, 218, 110, 154, 46, 243, 133, 251, 210, 182, 113, 44, 78 },
                            PhoneNumber = "1234512345",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 27, 8, 382, DateTimeKind.Local).AddTicks(3633),
                            OperationClaimId = 1,
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 8, 18, 27, 8, 382, DateTimeKind.Local).AddTicks(3643),
                            OperationClaimId = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointment")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointment")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.DoctorSpecialization", "DoctorSpecialization")
                        .WithMany()
                        .HasForeignKey("DoctorSpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorSpecialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
