using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Persistence.SeedData.Appointment
{
    public class AppointmentConfiguration : IEntityTypeConfiguration<Domain.Entities.Appointment>
    {
        public void Configure(EntityTypeBuilder<Domain.Entities.Appointment> builder)
        {
            builder.HasData(
               new Domain.Entities.Appointment
               {
                   Id = 1,
                   PatientId = 1,
                   DoctorId = 3,

                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Now,
                   IsDeleted = false,
                   CreatedDate = DateTime.Now,
               }
           );

            builder.HasData(
               new Domain.Entities.Appointment
               {
                   Id = 2,
                   PatientId = 1,
                   DoctorId = 4,

                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Now,
                   IsDeleted = false,
                   CreatedDate = DateTime.Now,
               }
           );

            builder.HasData(
               new Domain.Entities.Appointment
               {
                   Id = 3,
                   PatientId = 2,
                   DoctorId = 3,

                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Now,
                   IsDeleted = false,
                   CreatedDate = DateTime.Now,
               }
           );

            builder.HasData(
               new Domain.Entities.Appointment
               {
                   Id = 4,
                   PatientId = 2,
                   DoctorId = 12,

                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Parse("2024-06-28T08:00:03.785682"),
                   IsDeleted = false,
                   CreatedDate = DateTime.Parse("2024-06-27T13:30:03.785683"),
               },
               new Domain.Entities.Appointment
               {
                   Id = 5,
                   PatientId = 2,
                   DoctorId = 12,
                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Parse("2024-06-27T08:30:03.785682"),
                   IsDeleted = false,
                   CreatedDate = DateTime.Parse("2024-06-28T13:30:03.785683"),
               },
               new Domain.Entities.Appointment
               {
                   Id = 6,
                   PatientId = 2,
                   DoctorId = 12,
                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Parse("2024-06-27T09:00:03.785682"),
                   IsDeleted = false,
                   CreatedDate = DateTime.Parse("2024-06-28T08:30:03.785683"),
               },
               new Domain.Entities.Appointment
               {
                   Id = 7,
                   PatientId = 2,
                   DoctorId = 12,
                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Parse("2024-06-27T09:30:03.785682"),
                   IsDeleted = false,
                   CreatedDate = DateTime.Parse("2024-06-28T13:30:03.785683"),
               },
               new Domain.Entities.Appointment
               {
                   Id = 8,
                   PatientId = 2,
                   DoctorId = 12,
                   Status = Domain.Entities.AppointmentStatus.Scheduled,
                   AppointmentTime = DateTime.Parse("2024-06-27T10:00:03.785682"),
                   IsDeleted = false,
                   CreatedDate = DateTime.Parse("2024-06-28T13:30:03.785683"),
               }

           );

            DateTime startTime = DateTime.Today.AddDays(1).AddHours(10);
            DateTime endTime = DateTime.Today.AddDays(1).AddHours(16).AddMinutes(30);
            DateTime createdDate = DateTime.Now;

            var autoGeneratedAppointments = AppointmentSeedHelper.GenerateAppointments(12, 2, 12, startTime, endTime, createdDate);

            var autoGeneratedAppointments2 = AppointmentSeedHelper.GenerateAppointments(50, 2, 4, startTime, endTime, createdDate);

            var autoGeneratedAppointments3 = AppointmentSeedHelper.GenerateAppointments(100, 2, 5, startTime, endTime, createdDate);





            builder.HasData(autoGeneratedAppointments.ToArray());
            builder.HasData(autoGeneratedAppointments2.ToArray());

            builder.HasData(autoGeneratedAppointments3.ToArray());

        }
    }
}

public static class AppointmentSeedHelper
{
    public static List<Appointment> GenerateAppointments(int startId, int patientId, int doctorId, DateTime startTime, DateTime endTime, DateTime createdDate)
    {
        var appointments = new List<Appointment>();
        int currentId = startId;

        for (DateTime current = startTime; current <= endTime; current = current.AddMinutes(30))
        {
            appointments.Add(new Appointment
            {
                Id = currentId++,
                PatientId = patientId,
                DoctorId = doctorId,
                Status = AppointmentStatus.Scheduled,
                AppointmentTime = current,
                IsDeleted = false,
                CreatedDate = createdDate
            });
        }

        return appointments;
    }
}
